trigger:
  branches:
    include:
      - develop
      - master

pool:
  name: 'CloudAgent'

variables:
  buildConfiguration: 'Release'

stages:
- stage: Build
  displayName: 'Build Application'
  jobs:
  - job: BuildJob
    displayName: 'Build and Test'
    steps:
    - script: echo "Building the application... Branch is $(Build.SourceBranchName)"
      displayName: 'Build Information'

    # Ensure .NET application is built properly
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'  # Ensure correct .NET version
      displayName: 'Install .NET SDK'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
      displayName: 'Build .NET Application'

    # Debugging: List files after build
    - script: |
        echo "Listing build output..."
        ls -la $(Build.SourcesDirectory)/bin/$(buildConfiguration)
      displayName: 'Check Build Output Files'

    # Copy build outputs to artifact staging directory
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/bin/$(buildConfiguration)'
        Contents: '**/*'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Copy Build Output to Artifact Staging'

    # Debugging: List files in artifact staging directory
    - script: |
        echo "Listing artifact staging directory..."
        ls -la $(Build.ArtifactStagingDirectory)
      displayName: 'Verify Artifact Staging Directory'

    # Publish the artifact for use in deployment stages
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'
      displayName: 'Publish Build Artifacts'

# Deploy to Development for develop and master branches
- stage: DeployToDev
  displayName: 'Deploy to Development'
  dependsOn: Build
  condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: DeployDev
    displayName: 'Deploy to Dev Environment'
    environment: 'Development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(Pipeline.Workspace)/drop'
            displayName: 'Download Build Artifacts'

          - script: |
              echo "Listing deployment directory..."
              ls -la $(Pipeline.Workspace)/drop
            displayName: 'Debug Deployment Files'

          - script: |
              chmod +x $(Pipeline.Workspace)/drop/deploy_dev.sh
              echo "Starting deployment..."
              /bin/bash $(Pipeline.Workspace)/drop/deploy_dev.sh
            displayName: 'Deploy to Development'
            failOnStderr: true

# Deploy to Production with manual approval ONLY for master branch
- stage: DeployToProd
  displayName: 'Deploy to Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: DeployProd
    displayName: 'Deploy to Production Environment'
    environment: 'Production'  # This environment should have approval gates configured
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(Pipeline.Workspace)/drop'
            displayName: 'Download Build Artifacts'

          - script: |
              echo "Listing deployment directory..."
              ls -la $(Pipeline.Workspace)/drop
            displayName: 'Debug Deployment Files'

          - script: |
              chmod +x $(Pipeline.Workspace)/drop/deploy_prod.sh
              echo "Starting deployment..."
              /bin/bash $(Pipeline.Workspace)/drop/deploy_prod.sh
            displayName: 'Deploy to Production'
            failOnStderr: true
